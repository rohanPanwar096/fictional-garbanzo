{"version":3,"sources":["components/map/index.js","components/sidebar/graph.js","components/sidebar/country-select.js","components/sidebar/parameter-select.js","components/sidebar/index.js","App.js","reportWebVitals.js","index.js"],"names":["Map","setCountryGraph","mapContainer","useRef","map","useState","lng","setLng","lat","setLat","zoom","setZoom","marker","mapboxgl","Marker","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","current","container","style","center","setLngLat","addTo","nav","NavigationControl","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","on","getCenter","toFixed","getZoom","fetch","method","then","res","json","data","console","log","catch","err","className","margin","ref","accessToken","Graph","emissionData","selectedCountry","selectedParam","dataSet","setDataSet","graphData","filter","graphVar","i","push","x","year","y","value","label","axes","React","useMemo","primary","type","width","height","CountrySelect","countrySelect","options","setOptions","newArr","uniqueObject","j","placeholder","onChange","e","ParameterSelect","paramSelect","initialVal","setVal","handleChange","Sidebar","countryGraph","setSelectedParam","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78e44254.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\n\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm9oYW4tMzIxIiwiYSI6ImNrOWJiaDI2ODBkNnUzbWxrcjhwZmI3bDcifQ.q-SEkV9HsLCAKE5IOHPXsw';\n\nexport default function Map({setCountryGraph}) {\nconst mapContainer = useRef(null);\nconst map = useRef(null);\nconst [lng, setLng] = useState(-70.9);\nconst [lat, setLat] = useState(42.35);\nconst [zoom, setZoom] = useState(9);\n\nconst marker = new mapboxgl.Marker();\n\nuseEffect(() => {\n\n  //navigator object to access user location or you can hardcode the lat long of your desired location\n  navigator.geolocation.getCurrentPosition(function(position) {\n    // console.log(\"Position\",position)\n    setLat(position.coords.latitude);\n    setLng(position.coords.longitude);\n\n    if (map.current) return; // initialize map only once\n    map.current = new mapboxgl.Map({\n    container: mapContainer.current,\n    style: 'mapbox://styles/mapbox/streets-v11',\n    center: [position.coords.longitude, position.coords.latitude],\n    zoom: zoom\n    });\n\n    marker.setLngLat([position.coords.longitude, position.coords.latitude])\n    marker.addTo(map.current);\n    \n    const nav = new mapboxgl.NavigationControl();\n    map.current.addControl(nav, \"top-right\");\n\n    map.current.addControl(\n      new mapboxgl.GeolocateControl({\n      positionOptions: {\n      enableHighAccuracy: true\n      },\n      trackUserLocation: true\n      })\n      );\n  });\n},[])\n\nuseEffect(() => {\n  if (!map.current) return; // wait for map to initialize\n  map.current.on('click', () => {\n  setLng(map.current.getCenter().lng.toFixed(4));\n  setLat(map.current.getCenter().lat.toFixed(4));\n  setZoom(map.current.getZoom().toFixed(2));\n  });\n\n  fetch(`http://api.geonames.org/countryCodeJSON?lat=${lat}&lng=${lng}&username=prohan`,{\n    method: \"GET\",\n  }).then((res) => {\n    return res.json();\n  }).then((data) => {\n    console.log(\"DATA OF Country\",data)\n    if(data[\"countryName\"] === \"United States\") {\n      data[\"countryName\"] = \"United States of America\"\n    }\n    if(data[\"countryName\"] === \"Russia\") {\n      data[\"countryName\"] = \"Russian Federation\"\n    }\n    setCountryGraph(data[\"countryName\"]);\n  }).catch((err) => {\n    console.log(\"ERROR Occured\",err);\n  })\n  },[lng,lat]);\n\n  return (\n    //The code to render a map goes here.\n    <div className=\"map\">\n      <div className=\"sidebar_map\">\nLongitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n</div>\n<div style={{margin: \"10px 0px\"}}>Move to your desired country/location from map to see their pollution trend from year 1990 to 2014</div>\n      <div ref={mapContainer} className=\"map-container\" />\n    </div>\n  );\n}\n","import React,{useState,useEffect} from 'react'\nimport { Chart } from 'react-charts'\n \nexport default function Graph({emissionData,selectedCountry,selectedParam}) {\n  const [dataSet, setDataSet] = useState([]);\n  let graphData = emissionData.filter((data) => data[\"country_or_area\"] === selectedCountry && data[\"category\"] === selectedParam);\n\n  if(selectedCountry === \"India\") {\n    graphData = emissionData.filter((data) => data[\"country_or_area\"] === \"Australia\" && data[\"category\"] === selectedParam);\n  }\n\n//console.log(\"Graph\",graphData);\n\n  let graphVar = [];\n\n  for(let i in graphData) {\n    //graphVar.push(graphData[i]['year'],graphData[i]['value']);\n    graphVar.push({\n      x: graphData[i].year,\n      y: graphData[i].value,\n  });\n  }\n\n  useEffect(() => {\n    setDataSet([\n      {\n        label: 'Series 1',\n        data: graphVar\n      }\n    ])\n   // console.log(\"GRaph var\",graphVar)\n  },[selectedCountry,selectedParam])\n\n  //console.log(\"Graph data\",graphVar)\n \n  const axes = React.useMemo(\n    () => [\n      { primary: true, type: 'linear', position: 'bottom' },\n      { type: 'linear', position: 'left' }\n    ],\n    []\n  )\n \n  return (\n    <div\n      style={{\n        width: '400px',\n        height: '300px'\n      }}\n      className=\"chart\"\n    >\n      <p>Select the countries from dropdown or from Map</p>\n      <Chart data={dataSet} axes={axes} />\n    </div>\n  )\n}","import React,{useState,useEffect} from 'react'\nimport 'react-dropdown/style.css';\nimport Dropdown from 'react-dropdown';\n\nexport default function CountrySelect({data,countrySelect, selectedCountry}) {\n    //Write logic to render all countries as dropdown options\n   // const [initialCountry, setCountry] = useState(\"Australia\");\n    const [options,setOptions] = useState([]);\n\n    \n  if(selectedCountry === \"India\") {\n    selectedCountry = \"Australia\";\n  }\n\n    const handleChange = (e) => {\n        countrySelect(e.value);\n    }\n\n    //console.log(\"selected\",initialCountry)\n\n    useEffect(() => {\n        countrySelect(selectedCountry);\n    },[selectedCountry])\n    \n\n    useEffect(() => {\n        let newArr= [];\n        let uniqueObject = {};\n        let country;\n        for(let i in data) {\n            //console.log(\"Emission data\",emissionData[i][\"country_or_area\"])\n            country = data[i][\"country_or_area\"];\n            uniqueObject[country] = data[i];\n        }\n\n        for(let j in uniqueObject) {\n            //console.log(\"UNique Country\",uniqueObject[j])\n            newArr.push(uniqueObject[j][\"country_or_area\"]);\n        }\n        //console.log(\"Options\",newArr)\n        setOptions(newArr)\n    },[])\n   //const defaultOption = options[0];\n\n    return(\n        <div className=\"country-select\">\n            <Dropdown options={options}  placeholder=\"Select an option\" value={selectedCountry} onChange={handleChange}/>\n        </div>\n    )\n}","import React,{useEffect, useState} from 'react'\nimport 'react-dropdown/style.css';\nimport Dropdown from 'react-dropdown';\n\nexport default function ParameterSelect({data,paramSelect}) {\n    //Write logic to render all countries as dropdown options\n    const [initialVal, setVal] = useState(\"CO2\")\n    const [options,setOptions] = useState([]);\n\n    const handleChange = (e) => {\n        setVal(e.value)\n    }\n   // const defaultOption = options[0];\n    //console.log(\"Selected\",initialVal)\n    useEffect(() => {\n        paramSelect(initialVal)\n    },[initialVal])\n\n    useEffect(() => {\n        let newArr= [];\n        let uniqueObject = {};\n        let param;\n\n        for(let i in data) {\n            //console.log(\"Emission data\",emissionData[i][\"country_or_area\"])\n            param = data[i][\"category\"];\n            uniqueObject[param] = data[i];\n        }\n\n        for(let j in uniqueObject) {\n            //console.log(\"UNique Country\",uniqueObject[j])\n            newArr.push(uniqueObject[j][\"category\"]);\n        }\n        setOptions(newArr)\n    },[])\n    \n    return(\n        <div className=\"parameter-select\">\n            <Dropdown options={options} value={initialVal} placeholder=\"Select an option\" onChange={(e) => handleChange(e)}/>\n        </div>\n    )\n}","import React,{useEffect,useState} from 'react';\nimport Graph from './graph';\nimport CountrySelect from './country-select';\nimport ParameterSelect from './parameter-select';\nimport emissionData from '../../data/data.json'\n\nexport default function Sidebar({countryGraph,setCountryGraph}) {\n  // const [selectedCountry,setSelectedCountry] = useState(\"Australia\");\n  const [selectedParam,setSelectedParam] = useState(\"CO2\");\n  return (\n    <div className=\"sidebar\">\n      <div className=\"dropdowns\">\n        <CountrySelect selectedCountry={countryGraph} data={emissionData} countrySelect={setCountryGraph}/>\n        <ParameterSelect data={emissionData} paramSelect={setSelectedParam}/>\n      </div>\n      <Graph emissionData={emissionData} selectedCountry={countryGraph} selectedParam={selectedParam}/>\n    </div>\n  );\n}\n","import './App.css';\nimport React,{useState,useEffect} from 'react';\nimport Map from './components/map';\nimport Sidebar from './components/sidebar';\n\nfunction App() {\n  const [countryGraph,setCountryGraph] = useState(\"Australia\");\n  \n  return (\n    <div className=\"App\">\n      <Sidebar countryGraph={countryGraph} setCountryGraph={setCountryGraph} />\n      <Map setCountryGraph={setCountryGraph} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}